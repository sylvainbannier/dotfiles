# vim: set tabstop=2 shiftwidth=2 expandtab:

snippet scmp "Styled Component" b
styled.${1:div}\`
&{
  $0
}
\`
endsnippet

snippet react-pure-component "React pure component" b
export const ${1:myComponent} = (props) => <div className="$1">$1$0</div>
endsnippet

snippet react-storybook-story "React storybook story" b
const minimal$1 = {
  ${2:key : "value"}
}
const complete$1 = {
  ...minimal$1,
  ${3:key : "value"}
}
storiesOf(\`${1:MyComponent}\`, module)
.add(\`$1 minimal\`, () => <$1 {...minimal$1}/>)
.add(\`$1 complete\`, () => <$1 {...complete$1}/>)
.add(\`$1--variant\`, () => <$1 {...complete$1}/>)
$0
endsnippet

snippet react-storybook-story-variant "React storybook story variant" b
.add(\`${1:MyComponent--variant}\`, () => <$1/>)
$0
endsnippet

global !p

def getPropsFromFlow(args):
  import re
  result = []
  argList = args.split(",")
  for arg in argList:
    m = re.search('([^:? ]+)(\?)? *: *(.+)',arg.strip())
    if m is not None:
      prop = {}
      prop['name'] = m.group(1)
      prop['required'] = (m.group(2) != '?')
      t = m.group(3)
      primitives = ['boolean','number','string', 'any', 'array']
      if t in primitives :
        prop['type'] = t
      elif re.search('\(' + '|'.join(primitives) + '\)\[\]',t) is not None:
        prop['type'] = 'array'
      elif re.search('\( *\) *=> *\{ *\}',t) is not None:
        prop['type'] = 'func'
      else:
        prop['type'] = t + ' pick one : ' + '|'.join(primitives) + '|Array<type>|()=>{}|{}'
      result.append(prop)
  return result

def generateFakes(args,required):
  result = ""
  for prop in getPropsFromFlow(args):
    if prop['required'] == required:
      if prop['type'] == 'string':
        value = 'faker.lorem.words()'
      elif prop['type'] == 'number':
        value = 'faker.random.number()'
      elif prop['type'] == 'boolean':
        value = 'faker.random.boolean()'
      elif prop['type'] == 'array':
        value = 'Array(faker.random.number({max:10})).fill("").map((e,k) => faker.lorem.words())'
      elif prop['type'] == 'func':
        value = 'action("' + prop['name'] + '")'
      else:
        value = '{}'
      dep = "  " + prop['name'] + ": "+ value + ",\n"
      result = result + dep
  return result.rstrip()

def generateProptypes(args):
  result = ""
  for prop in getPropsFromFlow(args):
    required = '.isRequired' if (prop['required']) else ''
    if prop['type'] == 'string':
      value = 'string'
    elif prop['type'] == 'number':
      value = 'number'
    elif prop['type'] == 'boolean':
      value = 'bool'
    elif prop['type'] == 'array':
      value = 'array'
    elif prop['type'] == 'func':
      value = 'func'
    else:
      value = 'node'
    dep = "  " + prop['name'] + ": React.PropTypes." + value + required + ",\n"
    result = result + dep
  return result.rstrip()

# TODO generate data based on flow types
# generate methods for func
def generateJSX(args,comp):
  result = ""
  for prop in getPropsFromFlow(args):
    if prop['type'] == 'func':
      jsx = "<a className='" + comp + "__" + prop['name'] + "' onClick={" + prop['name'] + "}>" + prop['name'] + "</a>"
    elif prop['type'] == 'array':
      jsx = "<div className='" + comp + "__" + prop['name'] + "'>{" + prop['name'] + ".map((e,k) => <div className='" + comp + "__" + prop['name'] + "Item' key={k}>{e}</div> )}</div>"
    else:
      jsx = "<div className='" + comp + "__" + prop['name'] + "'>{" + prop['name'] + "}</div>"
    jsx = '{' + prop['name'] + ' && ' + jsx + '}' if (not prop['required']) else jsx
    result = result + "  " + jsx + "\n"
  return result.rstrip()

# TODO
# generate styles for arrays items
def generateStyles(args,comp):
  result = ""
  for prop in getPropsFromFlow(args):
    style = "." + comp + "__" + prop['name'] + "{ }\n"
    result = result + style
  return result.rstrip()

# TODO
# generate default values ?
def generateFunctionArgs(args):
  result = ""
  for prop in getPropsFromFlow(args):
    arg = prop['name'] + ", "
    result = result + arg
  return result.rstrip()

endglobal

# TODO:
# generate inline styles ? for layout ?
# generate tests too (snapshot, screenshot)
snippet react-component-stateless "React stateless component"
/* @flow */
import React from 'react';

// import './style.css';
/* styles :
.$1 {}
`!p snip.rv = generateStyles(t[2],t[1])`
*/

// './fixture.js'
import { action, linkTo } from '@kadira/storybook';
import faker from 'faker';

export const required = {
`!p snip.rv = generateFakes(t[2],True)`
}

export const optional = {
  ...required,
`!p snip.rv = generateFakes(t[2],False)`
}

// './story.js'
import React from 'react';
import { storiesOf } from '@kadira/storybook';
import { required, optional } from './fixtures.js'
import { $1 } from '.'

storiesOf('$1', module)
.add('$1', () => <div> <$1 {...optional}/>
{/* <img src={require('./screenshot.png')}/> */}
</div>)
.add('$1 required', () => <div> <$1 {...required}/>
{/* <img src={require('./screenshot--required.png')}/> */}
</div>)

// './index.js'
const ${1:MyComponent} = ({ `!p snip.rv = generateFunctionArgs(t[2])` } : {
${2:prop1?:string}
}) => <div className="$1">
`!p snip.rv = generateJSX(t[2],t[1])`
$0
</div>;

$1.propTypes = {
`!p snip.rv = generateProptypes(t[2])`
};

export { $1 };
endsnippet

snippet react-jsx-condition-with-fragment "condition avec opérateur ternaire produisant différents éléments de même niveau" b
{someCondition?
  createFragment({
    key1: <SomeJSXComponent/>,
    key2: someVar
  }):null
}
endsnippet

snippet immutable-js-update-list-item-by-key "Update list item" b
${1:list}.update(
  $1.findIndex(function(item) {
    return item.get(${2:"key_property"}) ===${3:"search_key"};
  }), function(item) {
    return item.set(${4: "value_property" },${5: "new value" });
  }
);
endsnippet

snippet describe "describe test bloc" b
describe("${1:My component}", () => {
  $0
});
endsnippet

snippet it "it test bloc" b
it("${1:should do ...}", () => {
  $0
});
endsnippet

snippet react-component "React component" b
const ${1:MyComponent} = React.createClass({
  propTypes: { ${2} },
  getInitialState() {},
  render() {
    return (<div>$0</div>);
  }
});
endsnippet

snippet react-proptype-function-required "React propType function" b
  ${1:myProp}:React.PropTypes.func.isRequired
  $0
endsnippet

snippet react-handle-event "react handle event" b
/**
 * @param {SyntheticEvent} event
 * @returns {undefined}
 */
handle${1:Event}(event) {
  event.preventDefault();
  $0
},
endsnippet

snippet sb-angular-ngroute "créé une nouvelle route dans un module existant"
angular.module('${1:url}RouteModule',[ngRoute])
.config(function($routeProvider, $locationProvider) {
  $routeProvider
  .when('/$1/:${2:param}', {
	templateUrl: '$1.html',
	controller: '$1Controller',
	resolve: {
	  // I will cause a 1 second delay
	  delay: function($q, $timeout) {
		var delay = $q.defer();
		$timeout(delay.resolve, 1000);
		return delay.promise;
	  }
	}
  })
  .when('/$1/:$2', {
	templateUrl: '$1.html',
	controller: '$1Controller'
  });

  // configure html5 to get links working on jsfiddle
  $locationProvider.html5Mode(true);
});
endsnippet

snippet sb-angular-directive-attribute "nouvelle directive attribut"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'A',
        scope: {},
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
      };
    }
  ]);
endsnippet

snippet sb-angular-directive-element "nouvelle directive element"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'E',
        scope: {},
		controllerAs: 'ctrl',
		bindToController : true,
		templateUrl: '${4:app/scripts/components/my-component.template.html}'
		require: '^${5:parentDirectiveName}',
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
		controller:  ['$scope','$element','$attrs', function($scope,$element,$attrs) {
			$0
		},
      };
    }
  ]);
endsnippet

snippet sb-react-component "react component"
var ${1:myComponent} = React.createClass({
  render: function () {
    return (
      <div class="${2:$1}">${0:$1}</div>
    )
  }
});
endsnippet

snippet sb-react-render "react render"
ReactDOM.render(
  <${1:myComponent} />,
  document.getElementById('${2:$1}')
);
endsnippet

snippet node-http-get "node http get"
ReactDOM.render(
var postData = querystring.stringify({
  'msg' : 'Hello World!'
});

var options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': postData.length
  }
};

var req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.')
  })
});

req.on('error', (e) => {
  console.log(`problem with request: ${e.message}`);
});

// write data to request body
req.write(postData);
req.end();
endsnippet


snippet node-http-get-simple "Node HTTP simple get"
http.get('/datas.json', (res) => {
  if(res.statusCode != 200) {
    throw("not found");
  }
  res.on('data', (chunk) => {
    var json = JSON.parse(chunk);
    console.debug(json);
  })
  res.on('error', (err) => {
    console.error('error  occured');
  })
});
endsnippet


snippet cl "console log"
console.log($0)
endsnippet

snippet fetch-json "html5 fetch json"
fetch('${1:/data.json}')
.then(function(response) {
  return response.json()
}).then(function(json) {
  ${0}
}).catch(function(ex) {
  console.log('parsing failed', ex)
})
endsnippet

snippet es6-export "ECMASCRIPT 6 export" b
export default function() {
  ${0}
}
endsnippet

snippet react-getDefaultProps "before getInitialState" b
getDefaultProps : function() {
  ${0}
}
endsnippet

snippet es6-import "import" b
import defaultMember from "module-name";
import * as name from "module-name";
import { member } from "module-name";
import { member as alias } from "module-name";
import { member1 , member2 } from "module-name";
import { member1 , member2 as alias2 , [...] } from "module-name";
import defaultMember, { member [ , [...] ] } from "module-name";
import defaultMember, * as name from "module-name";
import "module-name";
endsnippet
