snippet sb-angular-ngroute "créé une nouvelle route dans un module existant"
angular.module('${1:url}RouteModule',[ngRoute])
.config(function($routeProvider, $locationProvider) {
  $routeProvider
  .when('/$1/:${2:param}', {
	templateUrl: '$1.html',
	controller: '$1Controller',
	resolve: {
	  // I will cause a 1 second delay
	  delay: function($q, $timeout) {
		var delay = $q.defer();
		$timeout(delay.resolve, 1000);
		return delay.promise;
	  }
	}
  })
  .when('/$1/:$2', {
	templateUrl: '$1.html',
	controller: '$1Controller'
  });

  // configure html5 to get links working on jsfiddle
  $locationProvider.html5Mode(true);
});
endsnippet

snippet sb-angular-directive-attribute "nouvelle directive attribut"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'A',
        scope: {},
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
      };
    }
  ]);
endsnippet

snippet sb-angular-directive-element "nouvelle directive element"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'E',
        scope: {},
		controllerAs: 'ctrl',
		bindToController : true,
		templateUrl: '${4:app/scripts/components/my-component.template.html}'
		require: '^${5:parentDirectiveName}',
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
		controller:  ['$scope','$element','$attrs', function($scope,$element,$attrs) {
			$0
		},
      };
    }
  ]);
endsnippet

snippet sb-react-component "react component"
var ${1:myComponent} = React.createClass({
  render: function () {
    return (
      <div class="${2:$1}">${0:$1}</div>
    )
  }
});
endsnippet

snippet sb-react-render "react render"
ReactDOM.render(
  <${1:myComponent} />,
  document.getElementById('${2:$1}')
);
endsnippet

snippet node-http-get "node http get"
ReactDOM.render(
var postData = querystring.stringify({
  'msg' : 'Hello World!'
});

var options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': postData.length
  }
};

var req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.')
  })
});

req.on('error', (e) => {
  console.log(`problem with request: ${e.message}`);
});

// write data to request body
req.write(postData);
req.end();
endsnippet


snippet node-http-get-simple "Node HTTP simple get"
http.get('/datas.json', (res) => {
  if(res.statusCode != 200) {
    throw("not found");
  }
  res.on('data', (chunk) => {
    var json = JSON.parse(chunk);
    console.debug(json);
  })
  res.on('error', (err) => {
    console.error('error  occured');
  })
});
endsnippet


snippet cl "console log"
console.log($0)
endsnippet
