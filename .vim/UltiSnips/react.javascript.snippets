# ex: set tabstop=2 shiftwidth=2
snippet sb-angular-ngroute "créé une nouvelle route dans un module existant"
angular.module('${1:url}RouteModule',[ngRoute])
.config(function($routeProvider, $locationProvider) {
  $routeProvider
  .when('/$1/:${2:param}', {
	templateUrl: '$1.html',
	controller: '$1Controller',
	resolve: {
	  // I will cause a 1 second delay
	  delay: function($q, $timeout) {
		var delay = $q.defer();
		$timeout(delay.resolve, 1000);
		return delay.promise;
	  }
	}
  })
  .when('/$1/:$2', {
	templateUrl: '$1.html',
	controller: '$1Controller'
  });

  // configure html5 to get links working on jsfiddle
  $locationProvider.html5Mode(true);
});
endsnippet

snippet sb-angular-directive-attribute "nouvelle directive attribut"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'A',
        scope: {},
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
      };
    }
  ]);
endsnippet

snippet sb-angular-directive-element "nouvelle directive element"
angular.module('${1:myComponent}Module', [])
  .directive('${2:myComponent}', [
    '${3:dependency}',
    function $2($3) {
      return {
        restrict: 'E',
        scope: {},
		controllerAs: 'ctrl',
		bindToController : true,
		templateUrl: '${4:app/scripts/components/my-component.template.html}'
		require: '^${5:parentDirectiveName}',
        link: function $2Link(scope, element) {
          scope.$on('$destroy', function on$2Destroy() {
          });
        }
		controller:  ['$scope','$element','$attrs', function($scope,$element,$attrs) {
			$0
		},
      };
    }
  ]);
endsnippet

snippet sb-react-component "react component"
var ${1:myComponent} = React.createClass({
  render: function () {
    return (
      <div class="${2:$1}">${0:$1}</div>
    )
  }
});
endsnippet

snippet sb-react-render "react render"
ReactDOM.render(
  <${1:myComponent} />,
  document.getElementById('${2:$1}')
);
endsnippet

snippet node-http-get "node http get"
ReactDOM.render(
var postData = querystring.stringify({
  'msg' : 'Hello World!'
});

var options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': postData.length
  }
};

var req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.')
  })
});

req.on('error', (e) => {
  console.log(`problem with request: ${e.message}`);
});

// write data to request body
req.write(postData);
req.end();
endsnippet


snippet node-http-get-simple "Node HTTP simple get"
http.get('/datas.json', (res) => {
  if(res.statusCode != 200) {
    throw("not found");
  }
  res.on('data', (chunk) => {
    var json = JSON.parse(chunk);
    console.debug(json);
  })
  res.on('error', (err) => {
    console.error('error  occured');
  })
});
endsnippet


snippet cl "console log"
console.log($0)
endsnippet

snippet fetch-json "html5 fetch json"
fetch('${1:/data.json}')
.then(function(response) {
  return response.json()
}).then(function(json) {
  ${0}
}).catch(function(ex) {
  console.log('parsing failed', ex)
})
endsnippet

snippet react-functionnal-component "pure fonctionnal component"
const React = require('react');
export default (props) => <div className="${1:my-component}">${0}</div>
endsnippet

snippet react-proptypes "proptypes"
React.createClass({
  propTypes: {
    // You can declare that a prop is a specific JS primitive. By default, these
    // are all optional.
    optionalArray: React.PropTypes.array,
    optionalBool: React.PropTypes.bool,
    optionalFunc: React.PropTypes.func,
    optionalNumber: React.PropTypes.number,
    optionalObject: React.PropTypes.object,
    optionalString: React.PropTypes.string,

    // Anything that can be rendered: numbers, strings, elements or an array
    // (or fragment) containing these types.
    optionalNode: React.PropTypes.node,

    // A React element.
    optionalElement: React.PropTypes.element,

    // You can also declare that a prop is an instance of a class. This uses
    // JS's instanceof operator.
    optionalMessage: React.PropTypes.instanceOf(Message),

    // You can ensure that your prop is limited to specific values by treating
    // it as an enum.
    optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),

    // An object that could be one of many types
    optionalUnion: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number,
      React.PropTypes.instanceOf(Message)
    ]),

    // An array of a certain type
    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),

    // An object with property values of a certain type
    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),

    // An object taking on a particular shape
    optionalObjectWithShape: React.PropTypes.shape({
      color: React.PropTypes.string,
      fontSize: React.PropTypes.number
    }),

    // You can chain any of the above with `isRequired` to make sure a warning
    // is shown if the prop isn't provided.
    requiredFunc: React.PropTypes.func.isRequired,

    // A value of any data type
    requiredAny: React.PropTypes.any.isRequired,

    // You can also specify a custom validator. It should return an Error
    // object if the validation fails. Don't `console.warn` or throw, as this
    // won't work inside `oneOfType`.
    customProp: function(props, propName, componentName) {
      if (!/matchme/.test(props[propName])) {
        return new Error(
          'Invalid prop `' + propName + '` supplied to' +
          ' `' + componentName + '`. Validation failed.'
        );
      }
    },

    // You can also supply a custom validator to `arrayOf` and `objectOf`.
    // It should return an Error object if the validation fails. The validator
    // will be called for each key in the array or object. The first two
    // arguments of the validator are the array or object itself, and the
    // current item's key.
    customArrayProp: React.PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
      if (!/matchme/.test(propValue[key])) {
        return new Error(
          'Invalid prop `' + propFullName + '` supplied to' +
          ' `' + componentName + '`. Validation failed.'
        );
      }
    })
  },
endsnippet

snippet react-create-full-class  "create full react class"
import React from 'react'
var ${1:MyComponent} = React.createClass({

    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: function() {},

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: function() {},

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: function() {},

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: function() {},

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: function() {},

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: function() {},

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: function() {
      return {};
    },

    /**
     * @return {object}
     * @optional
     */
    getChildContext: function() {},

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @nosideeffects
     * @required
     */
    render: function() {
      var { ${2:usedProp}, ...other } = props;
      return (
        <${3:OtherComponent} {...other} >{this.props.$2}</$3>
        ${0}
      );
    },



    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: function() {},

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: function() {},

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: function() {},

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: function() {},

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: function() {},

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: function() {},

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: function() {},
});
endsnippet

snippet es6-export "ECMASCRIPT 6 export" b
export default function() {
  ${0}
}
endsnippet

snippet react-getDefaultProps "before getInitialState" b
getDefaultProps : function() {
  ${0}
}
endsnippet

snippet es6-import "import" b
import defaultMember from "module-name";
import * as name from "module-name";
import { member } from "module-name";
import { member as alias } from "module-name";
import { member1 , member2 } from "module-name";
import { member1 , member2 as alias2 , [...] } from "module-name";
import defaultMember, { member [ , [...] ] } from "module-name";
import defaultMember, * as name from "module-name";
import "module-name";
endsnippet
